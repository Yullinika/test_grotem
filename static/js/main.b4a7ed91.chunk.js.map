{"version":3,"sources":["components/ProductRow.js","components/ProductTable.js","App.js","serviceWorker.js","index.js"],"names":["ProductRow","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","checkedItem","setState","isChecked","state","bind","assertThisInitialized","props","toBasket","react_default","a","createElement","type","name","id","onClick","nameCategory","productName","productPrice","Component","ProductTable","addToBasket","isOrdered","forceUpdate","price_list","isLoad","_this2","fetch","then","res","json","result","values","console","log","row_list","map","item","skus","product","components_ProductRow","group","key","price","table","className","App","components_ProductTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b4a7ed91.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass ProductRow extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            isChecked: false\r\n        };\r\n        this.checkedItem = this.checkedItem.bind(this);\r\n    }\r\n\r\n    checkedItem = function () {\r\n        this.setState({\r\n            isChecked: !this.state.isChecked\r\n        });\r\n    };\r\n\r\n    render() {\r\n        if (this.state.isChecked && this.props.toBasket) {\r\n            return null;\r\n        } else {\r\n            let row = <tr>\r\n                <td><input type='checkbox' name='product-list' id={this.props.id} onClick={this.checkedItem}/></td>\r\n                <td>{this.props.nameCategory}</td>\r\n                <td>{this.props.productName}</td>\r\n                <td>{this.props.productPrice}</td>\r\n            </tr>;\r\n            return row;\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default ProductRow;","import React, {Component} from 'react';\r\nimport ProductRow from \"./ProductRow\";\r\n\r\nclass ProductTable extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            price_list: null,\r\n            isLoad: false,\r\n            isOrdered: false\r\n        };\r\n        this.addToBasket = this.addToBasket.bind(this);\r\n\r\n    }\r\n\r\n    addToBasket = function () {\r\n        this.setState({\r\n            isOrdered: true\r\n        });\r\n        this.forceUpdate();\r\n    };\r\n\r\n    componentDidMount() {\r\n        fetch('https://ssdev.superagent.ru/TestApp/Values/GetWithParent')\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        isLoad: true,\r\n                        price_list: Object.values(result)\r\n                    });\r\n                    console.log(result);\r\n                }\r\n            );\r\n\r\n    }\r\n\r\n    render() {\r\n        let addToBasket = this.state.isOrdered;\r\n        if (!this.state.isLoad) {\r\n            return <div>Loading...</div>\r\n        } else {\r\n            let row_list = this.state.price_list.map(function (item) {\r\n                let list = Object.values(item.skus).map(product =>\r\n                    <ProductRow nameCategory={item.group.name}\r\n                                key={item.group.name + \"_\" + item.group.id + \"_\" + product.id}\r\n                                id={item.group.name + \"_\" + item.group.id + \"_\" + product.id}\r\n                                productName={product.name}\r\n                                productPrice={product.price}\r\n                                toBasket={addToBasket}\r\n                    />);\r\n                return list;\r\n            });\r\n            let table = <table className='table table-responsive'>\r\n                <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th>Категория</th>\r\n                    <th>Название</th>\r\n                    <th>Цена</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {row_list}\r\n                </tbody>\r\n            </table>;\r\n            return <div className='row'>\r\n                {table}\r\n                <button type=\"button\" className=\"btn btn-primary\" onClick={this.addToBasket}>Добавить в корзину</button>\r\n            </div>;\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default ProductTable;","import React, { Component } from 'react';\nimport ProductTable from './components/ProductTable'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ProductTable/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}